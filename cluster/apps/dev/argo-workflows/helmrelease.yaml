---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: argo-workflows
  namespace: dev
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://argoproj.github.io/argo-helm
      chart: argo-workflows
      version: 0.14.1
      sourceRef:
        kind: HelmRepository
        name: argo-charts
        namespace: flux-system
      interval: 5m

  values:

    images:
      # -- imagePullPolicy to apply to all containers
      pullPolicy: IfNotPresent
      # -- Secrets with credentials to pull images from a private registry
      pullSecrets: []
    # -- Create clusterroles that extend existing clusterroles to interact with argo-cd crds
    ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
    createAggregateRoles: true

    # -- Restrict Argo to operate only in a single namespace (the namespace of the
    # Helm release) by apply Roles and RoleBindings instead of the Cluster
    # equivalents, and start workflow-controller with the --namespaced flag. Use it
    # in clusters with strict access policy.
    singleNamespace: false

    workflow:
      namespace:
      serviceAccount:
        create: true
        annotations: {}
        name: "argo-workflow"
      rbac:
        # -- Adds Role and RoleBinding for the above specified service account to be able to run workflows.
        # A Role and Rolebinding pair is also created for each namespace in controller.workflowNamespaces (see below)
        create: true

    controller:
      image:
        registry: quay.io
        repository: argoproj/workflow-controller
        tag: "v3.2.6"
      parallelism: 20
      resourceRateLimit:
        limit: 10
        burst: 1

      namespaceParallelism: 10

      persistence:
        connectionPool:
          maxIdleConns: 100
          maxOpenConns: 1
          # # save the entire workflow into etcd and DB
          nodeStatusOffLoad: false
          # # enable archiving of old workflows
        archive: false
        postgresql:
          host: postgresql
          port: 5432
          database: postgres
          tableName: argo_workflows
          # the database secrets must be in the same namespace of the controller
          userNameSecret:
            name: argo-postgres-config
            key: username
          passwordSecret:
            name: argo-postgres-config
            key: password

      # -- Default values that will apply to all Workflows from this controller, unless overridden on the Workflow-level.
      # Only valid for 2.7+
      ## See more: https://argoproj.github.io/argo-workflows/default-workflow-specs/
      workflowDefaults: {}
      #  spec:
      #    ttlStrategy:
      #      secondsAfterCompletion: 84600

      # -- Number of workflow workers
      workflowWorkers: # 32
      # -- Number of pod workers
      podWorkers: # 32
      # -- Restricts the Workflows that the controller will process.
      # Only valid for 2.9+
      workflowRestrictions: {}
      # templateReferencing: Strict|Secure

      # -- Specifies the container runtime interface to use (one of: `docker`, `kubelet`, `k8sapi`, `pns`, `emissary`)
      ## Ref: https://argoproj.github.io/argo-workflows/workflow-executors/
      containerRuntimeExecutor: emissary
      # -- Specifies the executor to use. This has precedence over `controller.containerRuntimeExecutor`.
      containerRuntimeExecutors: []
        # - name: emissary
        #   selector:
        #     matchLabels:
        #       workflows.argoproj.io/container-runtime-executor: emissary

    executor:
      image:
        registry: quay.io
        repository: argoproj/argoexec
        tag: "v3.2.6"

    server:
      enabled: true
      image:
        registry: quay.io
        repository: argoproj/argocli
        tag: "v3.2.6"

      extraArgs:
        - --auth-mode=server

      securityContext:
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
      # -- Server name string
      name: server
      # -- Service type for server pods
      serviceType: ClusterIP
      # -- Service port for server
      servicePort: 2746

      serviceAccount:
        create: true

      replicas: 1

      ingress:
        enabled: true
        ingressClassName: nginx
        hosts:
          - argoworkflows.${INTERNAL_DOMAIN}
        paths:
          - /
        pathType: Prefix

        tls:
          - secretName: argoworkflows-int-tls
            hosts:
              - argoworkflows.${INTERNAL_DOMAIN}
